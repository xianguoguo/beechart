<?xml version="1.0" encoding="utf-8"?>
<base:EditorChildBase xmlns:fx="http://ns.adobe.com/mxml/2009"
                      xmlns:s="library://ns.adobe.com/flex/spark"
                      xmlns:mx="library://ns.adobe.com/flex/mx"
                      xmlns:base="cn.alibaba.yid.chart.builder.components.base.*"
                      xmlns:ds="de.polygonal.ds.*" xmlns:base1="bee.chart.builder.components.base.*">
    <fx:Metadata>
		[Event(name="styleChange",type="events.StyleChangeEvent")]
	</fx:Metadata>
    <fx:Declarations>
        <!-- 将非可视元素（例如服务、值对象）放在此处 -->
        <s:ArrayCollection id="characterAC">
            <fx:Array>
                <fx:Object label="12px"
                           data="12"/>
                <fx:Object label="14px"
                           data="14"/>
                <fx:Object label="16px"
                           data="16"/>
                <fx:Object label="18px"
                           data="18"/>
                <fx:Object label="20px"
                           data="20"/>
                <fx:Object label="22px"
                           data="22"/>
            </fx:Array>
        </s:ArrayCollection>
        <s:RadioButtonGroup id="lineMethodGroup"
                            change="lineMethodGroup_changeHandler(event)">
        </s:RadioButtonGroup>
        <s:RadioButtonGroup id="dotTypeGroup"
                            change="dotTypeGroup_changeHandler(event)">
        </s:RadioButtonGroup>
    </fx:Declarations>
    <fx:Script>
        <![CDATA[
            import assets.FileAssests;
            
            import cn.alibaba.util.ColorUtil;
            import bee.chart.builder.DataProvider;
            import cn.alibaba.yid.chart.builder.components.base.ImageLabelItemRenderer;
            import bee.chart.builder.events.BuilderEvent;
            import bee.chart.builder.events.StyleChangeEvent;
            import bee.chart.builder.utils.ChartStyleSetting;
            
            import mx.collections.IList;
            import mx.events.ColorPickerEvent;
            import mx.events.FlexEvent;
            import mx.events.ItemClickEvent;
            
            import spark.events.IndexChangeEvent;
            [Bindable]
            //有无节点折线图数据
            private var xAxisLabelArray:ArrayCollection = DataProvider.getxAxisLabelArray();
            
            [Bindable]
            private var square_dot_Img:Class = FileAssests.square_dot_Img;
            [Bindable]
            private var circle_dot_Img:Class = FileAssests.circle_dot_Img;
            [Bindable]
            private var airSquare_dot_Img:Class = FileAssests.airSquare_dot_Img;
            [Bindable]
            private var airCircle_dot_Img:Class = FileAssests.airCircle_dot_Img;
            
            /**
             * 重写defalutSetting()函数，设置默认设置
             * */
            override protected function defalutSetting():void
            {
                super.defalutSetting();
                lineMethodGroup.selectedValue = lineMethodGroup.getRadioButtonAt(0).value;
                dotTypeGroup.selectedValue = dotTypeGroup.getRadioButtonAt(0).value;
                lineThicknessNS.value = 2;
                dotSizeNS.value = 5;
                xAxisLabelList.selectedIndex = 0;
                dotSetControl.enabled = true;
                
                var styleSetting:ChartStyleSetting = ChartStyleSetting.getInstance();
                //line配置
                var lineStyleObject:Object = styleSetting.getStyle("line");
                if (lineStyleObject)
                {
                    //线类型
                    var lineMethodStr:String = lineStyleObject["lineMethod"];
                    if (lineMethodStr)
                    {
                        lineMethodGroup.selectedValue = lineMethodStr;
                    }
                    //线粗细
                    var thicknessStr:String = lineStyleObject["thickness"];
                    if (thicknessStr)
                    {
                        lineThicknessNS.value = Number(thicknessStr);
                    }
                }
                //line dot配置
                var lineDotStyleObject:Object = styleSetting.getStyle("line dot");
                if (lineDotStyleObject)
                {
                    //点类型
                    var shapeStr:String = lineDotStyleObject["shape"];
                    if (shapeStr)
                    {
                        dotTypeGroup.selectedValue = shapeStr;
                    }
                    //点大小
                    var radiusStr:String = lineDotStyleObject["radius"];
                    if (radiusStr)
                    {
                        if (radiusStr == "0")
                        {
                            dotSetControl.enabled = false;
                            dotSetControl.toolTip = "您选择了无节点的折线图，目前该操作无法进行";
                        }
                        else
                        {
                            dotSizeNS.value = Number(radiusStr);
                            dotSetControl.enabled = true;
                            dotSetControl.toolTip = "";
                        }
                    }
                }
                //xAxis配置
                var xAxisStyleObject:Object = styleSetting.getStyle("xAxis");
                if (xAxisStyleObject)
                {
                    var xAxisType:String = "";
                    var labelRotationStr:String = xAxisStyleObject["labelRotation"];
                    var labelGapStr:String = xAxisStyleObject["labelGap"];
                    if (labelRotationStr)
                    {
                        xAxisType = "文字倾斜式";
                    }
                    else
                    {
                        if (labelGapStr == "0")
                        {
                            xAxisType = "默认";
                        }
                        else if (labelGapStr != null)
                        {
                            xAxisType = "文字间隔式";
                        }
                    }
                    if (xAxisType)
                    {
                        var dataProvider:IList = xAxisLabelList.dataProvider;
                        for each (var obj:Object in dataProvider)
                        {
                            if (obj.label == xAxisType)
                            {
                                xAxisLabelList.selectedItem = obj;
                                break;
                            }
                        }
                    }
                }
            }
            
//			override protected function removedFromStageHandler(event:Event):void
//			{
//				super.removedFromStageHandler(event);
//				xAxisLabelList.removeEventListener(ItemClickEvent.ITEM_CLICK, animBtnList_ItemClickHandler);
//			}
            
//			protected function labelColorPicker_changeHandler(event:ColorPickerEvent):void
//			{
//				var styleObject:Object={"color": labelColorTextInput.text};
//				dispatchStyleChangeEvent("label", styleObject);
//			}
//
//			protected function labelColorTextInput_enterHandler(event:FlexEvent):void
//			{
//				labelColorPicker.selectedColor=ColorUtil.str2int(labelColorTextInput.text);
//				var styleObject:Object={"color": labelColorTextInput.text};
//				dispatchStyleChangeEvent("label", styleObject);
//			}
//
//			protected function legendColorTextInput_enterHandler(event:FlexEvent):void
//			{
//				legendColorPicker.selectedColor=ColorUtil.str2int(legendColorTextInput.text);
//			}
//
//			/**
//			 * 修改label字体大小
//			 * */
//			protected function labelFontSizeComboBox_changeHandler(event:IndexChangeEvent):void
//			{
//				var selectedItem:Object=labelFontSizeComboBox.selectedItem;
//				var styleObject:Object={"fontSize": selectedItem.data};
//				dispatchStyleChangeEvent("label", styleObject);
//			}
            /**
             * 改变连接线类型
             * */
            protected function lineMethodGroup_changeHandler(event:Event):void
            {
                var lineMethodGroup:RadioButtonGroup = event.target as RadioButtonGroup;
                var styleObject:Object = {"lineMethod": lineMethodGroup.selectedValue};
                dispatchStyleChangeEvent("line", styleObject);
            }
            
            /**
             * 改变点类型
             * */
            protected function dotTypeGroup_changeHandler(event:Event):void
            {
                var dotTypeGroup:RadioButtonGroup = event.target as RadioButtonGroup;
                var dotTypeStr:String = dotTypeGroup.selectedValue as String;
                var styleObject:Object;
                switch (dotTypeStr)
                {
                    case "circle":
                        styleObject = {"shape": "circle", /* 圆形 */ "color": "inherit#color", /* 颜色和线条一样 */ "borderThickness": 2 /* 边框粗细 */}
                        break;
                    case "square":
                        styleObject = {"shape": "square", /* 方形 */ "color": "inherit#color", /* 颜色和线条一样 */ "borderThickness": 2 /* 边框粗细 */}
                        break;
                    case "airCircle":
                        styleObject = {"shape": "circle", /* 空心圆形 */ "borderColor": "inherit#color", /* 边框颜色 */ "borderThickness": 2 /* 边框粗细 */, "color": "#FFFFFF" /* 白色底 */}
                        break;
                    case "airSquare":
                        styleObject = {"shape": "square", /* 空心方形 */ "borderColor": "inherit#color", /* 边框颜色 */ "borderThickness": 2 /* 边框粗细 */, "color": "#FFFFFF" /* 白色底 */}
                        break;
                    
                }
                dispatchStyleChangeEvent("line dot", styleObject);
            }
            
            /**
             * 修改线条粗细
             * */
            protected function lineThicknessNS_changeHandler(event:Event):void
            {
                var ns:NumericStepper = event.target as NumericStepper;
                var styleObject:Object = {"thickness": ns.value};
                dispatchStyleChangeEvent("line", styleObject);
            }
            
            /**
             * 修改点大小
             * */
            protected function dotSizeNS_changeHandler(event:Event):void
            {
                
                var ns:NumericStepper = event.target as NumericStepper;
                var styleObject:Object = {"radius": ns.value};
                dispatchStyleChangeEvent("line dot", styleObject);
            }
            
            /**
             * 修改横坐标数据排列样式
             * */
            private function animBtnList_ItemClickHandler(event:ItemClickEvent):void
            {
                var styleObject:Object;
                var selectedItem:Object = event.item.label;
                switch (selectedItem)
                {
                    case "默认":
                        styleObject = {"labelGap": 0, "labelRotation": 0};
                        break;
                    case "文字间隔式":
                        styleObject = {"labelGap": "auto", "labelRotation": 0};
                        break;
                    case "文字倾斜式":
                        styleObject = {"labelRotation": 45};
                        break;
                }
                
                dispatchStyleChangeEvent("xAxis", styleObject);
            }
            
            /**
             * 横坐标数据排列样式，重新定义List的itemRenderer的相关数据.
             * */
            protected function xAxisLabelList_creationCompleteHandler(event:FlexEvent):void
            {
                var factory:ClassFactory = new ClassFactory(ImageLabelItemRenderer);
                factory.properties = {bestWidth: 105, beseHeight: 67, beseHeight2: 35};
                xAxisLabelList.itemRenderer = factory;
            }
        ]]>
    </fx:Script>
    <mx:Grid top="18"
             verticalGap="18"
             horizontalGap="0"
             paddingLeft="22"
             width="100%"
             height="100%">
        <mx:GridRow width="100%">
            <mx:GridItem width="100%">
                <base:ChartSizeContainer chartWidth="500"
                                         chartHeight="300"
                                         width="100%">

                </base:ChartSizeContainer>
            </mx:GridItem>
        </mx:GridRow>
        <mx:GridRow width="100%">
            <mx:GridItem width="100%">
                <base:TitleLabelContainer width="100%"
                                          text="折线样式"/>
            </mx:GridItem>
        </mx:GridRow>
        <mx:GridRow width="100%"
                    paddingLeft="8">
            <mx:GridItem width="100%">
                <s:Group width="100%"
                         height="100%">
                    <s:layout>
                        <s:VerticalLayout>
                        </s:VerticalLayout>
                    </s:layout>
                    <s:Group>
                        <s:layout>
                            <s:HorizontalLayout>
                            </s:HorizontalLayout>
                        </s:layout>
                        <s:Label text="连接线类型："/>
                        <s:RadioButton label="直线"
                                       value="line"
                                       group="{lineMethodGroup}"/>
                        <s:RadioButton label="曲线"
                                       value="curve"
                                       group="{lineMethodGroup}"/>
                    </s:Group>
                    <s:Group>
                        <s:layout>
                            <s:HorizontalLayout>
                            </s:HorizontalLayout>
                        </s:layout>
                        <s:Label text="折线粗细："/>
                        <s:NumericStepper id="lineThicknessNS"
                                          change="lineThicknessNS_changeHandler(event)">
                            <s:minimum>1</s:minimum>
                            <s:maximum>10</s:maximum>
                        </s:NumericStepper>
                        <s:Label text="px"/>
                    </s:Group>
                    <s:Group id="dotSetControl">
                        <s:layout>
                            <s:VerticalLayout>

                            </s:VerticalLayout>
                        </s:layout>

                        <s:Group>
                            <s:layout>
                                <s:HorizontalLayout>
                                </s:HorizontalLayout>
                            </s:layout>
                            <s:Label text="点类型："/>
                            <base1:ImageRadioButton icon="{square_dot_Img}"
                                                   value="square"
                                                   toolTip="实心方"
                                                   group="{dotTypeGroup}"/>
                            <base1:ImageRadioButton icon="{circle_dot_Img}"
                                                   value="circle"
                                                   toolTip="实心圆"
                                                   group="{dotTypeGroup}"/>
                            <base1:ImageRadioButton icon="{airSquare_dot_Img}"
                                                   value="airSquare"
                                                   toolTip="空心方"
                                                   group="{dotTypeGroup}"/>
                            <base1:ImageRadioButton icon="{airCircle_dot_Img}"
                                                   value="airCircle"
                                                   toolTip="空心方"
                                                   group="{dotTypeGroup}"/>

                        </s:Group>
                        <s:Group>
                            <s:layout>
                                <s:HorizontalLayout>
                                </s:HorizontalLayout>
                            </s:layout>
                            <s:Label text="点大小："/>
                            <s:NumericStepper id="dotSizeNS"
                                              change="dotSizeNS_changeHandler(event)">
                                <s:minimum>1</s:minimum>
                                <s:maximum>10</s:maximum>
                            </s:NumericStepper>
                            <s:Label text="px"/>
                        </s:Group>
                    </s:Group>
                </s:Group>
            </mx:GridItem>
        </mx:GridRow>
        <mx:GridRow width="100%">
            <mx:GridItem width="100%">
                <!--颜色配置组件-->
                <base:ColorConfigContainer width="100%">
                </base:ColorConfigContainer>
            </mx:GridItem>
        </mx:GridRow>
        <mx:GridRow width="100%">
            <mx:GridItem width="100%">
                <base:TitleLabelContainer width="100%"
                                          text="横坐标数据排列样式"/>
            </mx:GridItem>
        </mx:GridRow>
        <mx:GridRow width="100%"
                    paddingLeft="8">
            <mx:GridItem width="100%">
                <base:PopularList id="xAxisLabelList"
                                  dataProvider="{xAxisLabelArray}"
                                  itemClickHanlder="animBtnList_ItemClickHandler"
                                  creationComplete="xAxisLabelList_creationCompleteHandler(event)">
                    <base:layout>
                        <s:TileLayout>
                            <s:requestedColumnCount>3</s:requestedColumnCount>
                        </s:TileLayout>
                    </base:layout>
                </base:PopularList>
            </mx:GridItem>
        </mx:GridRow>
    </mx:Grid>
    <!--暂时无该功能
         <mx:HRule width="100%"
         height="1"/>
         <s:Label text="文字编辑"
         styleName="titleFont"/>
         <s:SkinnableContainer>
         <s:layout>
         <s:HorizontalLayout/>
         </s:layout>
         <s:Label text="数据标注"/>
         <s:ComboBox id="labelFontSizeComboBox"
         dataProvider="{characterAC}"
         selectedIndex="0"
         change="labelFontSizeComboBox_changeHandler(event)">
         </s:ComboBox>
         <mx:ColorPicker id="labelColorPicker"
         change="labelColorPicker_changeHandler(event)">
         </mx:ColorPicker>
         <s:TextInput id="labelColorTextInput"
         text="{ColorUtil.int2str(labelColorPicker.selectedColor)}"
         enter="labelColorTextInput_enterHandler(event)"/>
         </s:SkinnableContainer>
         <s:SkinnableContainer>
         <s:layout>
         <s:HorizontalLayout/>
         </s:layout>
         <s:Label text="图例文字"/>
         <s:ComboBox id="legendComboBox"
         dataProvider="{characterAC}"
         selectedIndex="0">
         </s:ComboBox>
         <mx:ColorPicker id="legendColorPicker">
         </mx:ColorPicker>
         <s:TextInput id="legendColorTextInput"
         text="{ColorUtil.int2str(legendColorPicker.selectedColor)}"
         enter="legendColorTextInput_enterHandler(event)"/>
         </s:SkinnableContainer>
    -->

</base:EditorChildBase>
