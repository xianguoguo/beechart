<?xml version="1.0" encoding="utf-8"?>
<base:EditorChildBase xmlns:fx="http://ns.adobe.com/mxml/2009"
                      xmlns:s="library://ns.adobe.com/flex/spark"
                      xmlns:mx="library://ns.adobe.com/flex/mx"
                      xmlns:base="cn.alibaba.yid.chart.builder.components.base.*">
    <fx:Metadata>
		[Event(name="styleChange",type="events.StyleChangeEvent")]
	</fx:Metadata>
    <fx:Declarations>
        <!-- 将非可视元素（例如服务、值对象）放在此处 -->
        <s:ArrayCollection id="characterAC">
            <fx:Array>
                <fx:Object label="12px"
                           data="12"/>
                <fx:Object label="14px"
                           data="14"/>
                <fx:Object label="16px"
                           data="16"/>
                <fx:Object label="18px"
                           data="18"/>
                <fx:Object label="20px"
                           data="20"/>
                <fx:Object label="22px"
                           data="22"/>
            </fx:Array>
        </s:ArrayCollection>
    </fx:Declarations>
    <fx:Script>
        <![CDATA[
            import cn.alibaba.util.ColorUtil;
            import bee.chart.builder.events.StyleChangeEvent;
            import bee.chart.builder.utils.ChartStyleSetting;
            
            import mx.collections.IList;
            import mx.events.ColorPickerEvent;
            import mx.events.FlexEvent;
            
            import spark.events.IndexChangeEvent;
            import spark.events.TextOperationEvent;
            
            /**
             * 重写defalutSetting()函数，设置默认设置
             * */
            override protected function defalutSetting():void
            {
                super.defalutSetting();
                radiusTextInput.text = 300 + "";
                labelFontSizeComboBox.selectedIndex = 0;
                labelColorPicker.selectedColor = 0;
                var styleSetting:ChartStyleSetting = ChartStyleSetting.getInstance();
                var chartStyleObject:Object = styleSetting.getStyle("chart");
                if (chartStyleObject)
                {
                    //图表大小
                    var chartWidthStr:String = chartStyleObject["chartWidth"];
                    if (chartWidthStr)
                    {
                        var chartWidthNum:Number = Number(chartWidthStr);
                        if (chartWidthNum)
                        {
                            radiusTextInput.text = chartWidthNum + "";
                            radiusHSlider.value = chartWidthNum;
                        }
                    }
                }
                
                var sliceStyleObject:Object = styleSetting.getStyle("slice");
                if (sliceStyleObject)
                {
                    //数据标注文字大小
                    var fontSizeStr:String = sliceStyleObject["fontSize"];
                    if (fontSizeStr)
                    {
                        var dataProvider:IList = labelFontSizeComboBox.dataProvider;
                        for each (var obj:Object in dataProvider)
                        {
                            if (obj.data == fontSizeStr)
                            {
                                labelFontSizeComboBox.selectedItem = obj;
                                break;
                            }
                        }
                    }
                    
                    //数据标注颜色
                    var colorStr:String = sliceStyleObject["color"];
                    if (colorStr)
                    {
                        labelColorPicker.selectedColor = ColorUtil.str2int(colorStr);
                    }
                }
            }
            
            protected function labelColorPicker_changeHandler(event:ColorPickerEvent):void
            {
                
                var styleObject:Object = {"color": labelColorTextInput.text};
                dispatchStyleChangeEvent("slice", styleObject);
            }
            
            protected function labelColorTextInput_enterHandler(event:FlexEvent):void
            {
                
                labelColorPicker.selectedColor = ColorUtil.str2int(labelColorTextInput.text);
                dispatchStyleChangeEvent("slice", {"color": labelColorTextInput.text});
            }
            
//			protected function legendColorTextInput_enterHandler(event:FlexEvent):void
//			{
//
//				legendColorPicker.selectedColor=ColorUtil.str2int(legendColorTextInput.text);
//			}
            
            protected function radiusTextInput_enterHandler(event:FlexEvent):void
            {
                
                //限制输入的最小和最大长度，限制为滚动条的最小和最大长度
                var txt:String = radiusTextInput.text;
                var num:Number = Number(txt);
                if (num < radiusHSlider.minimum)
                {
                    radiusTextInput.text = String(radiusHSlider.minimum);
                }
                else if (num > radiusHSlider.maximum)
                {
                    radiusTextInput.text = String(radiusHSlider.maximum);
                }
                else
                {
                    radiusTextInput.text = String(radiusHSlider.value);
                }
                var styleObject:Object = {"chartWidth": radiusHSlider.value, "chartHeight": radiusHSlider.value};
                dispatchStyleChangeEvent("chart", styleObject);
            }
            
            
            protected function radiusHSlider_changeEndHandler(event:FlexEvent):void
            {
                
                var styleObject:Object = {"chartWidth": radiusHSlider.value, "chartHeight": radiusHSlider.value};
                dispatchStyleChangeEvent("chart", styleObject);
            }
            
            /**
             * 修改label字体大小
             * */
            protected function labelFontSizeComboBox_changeHandler(event:IndexChangeEvent):void
            {
                var selectedItem:Object = labelFontSizeComboBox.selectedItem;
                var styleObject:Object = {"fontSize": selectedItem.data};
                dispatchStyleChangeEvent("slice", styleObject);
            }
        ]]>
    </fx:Script>
    <mx:Grid top="18"
             verticalGap="18"
             horizontalGap="0"
             paddingLeft="22"
             width="100%"
             height="100%">
        <mx:GridRow width="100%">
            <mx:GridItem width="100%">
                <base:TitleLabelContainer width="100%"
                                          text="圆饼大小"/>
            </mx:GridItem>
        </mx:GridRow>
        <mx:GridRow width="100%">
            <mx:GridItem width="100%"
                         paddingLeft="8">
                <s:Group width="100%">
                    <s:layout>
                        <s:VerticalLayout/>
                    </s:layout>
                    <s:Group>
                        <s:layout>
                            <s:HorizontalLayout/>
                        </s:layout>
                        <s:Label text="半径"/>
                        <s:TextInput id="radiusTextInput"
                                     restrict="[0-9]"
                                     text="{radiusHSlider.value}"
                                     enter="radiusTextInput_enterHandler(event)"/>
                        <s:Label text="px"/>
                    </s:Group>
                    <s:HSlider id="radiusHSlider"
                               width="80%"
                               value="{Number(radiusTextInput.text)}"
                               changeEnd="radiusHSlider_changeEndHandler(event)">
                        <s:minimum>10</s:minimum>
                        <s:maximum>400</s:maximum>
                    </s:HSlider>
                </s:Group>
            </mx:GridItem>
        </mx:GridRow>
        <mx:GridRow width="100%">
            <mx:GridItem width="100%">
                <!--颜色配置组件-->
                <base:ColorConfigContainer width="100%">
                </base:ColorConfigContainer>
            </mx:GridItem>
        </mx:GridRow>
        <mx:GridRow width="100%">
            <mx:GridItem width="100%">
                <base:TitleLabelContainer width="100%"
                                          text="文字编辑"/>
            </mx:GridItem>
        </mx:GridRow>
        <mx:GridRow width="100%">
            <mx:GridItem width="100%"
                         paddingLeft="8">
                <s:Group width="100%">
                    <s:layout>
                        <s:HorizontalLayout/>
                    </s:layout>
                    <s:Label text="数据标注"/>
                    <s:DropDownList id="labelFontSizeComboBox"
                                    dataProvider="{characterAC}"
                                    change="labelFontSizeComboBox_changeHandler(event)">
                    </s:DropDownList>
                    <mx:ColorPicker id="labelColorPicker"
                                    change="labelColorPicker_changeHandler(event)">
                    </mx:ColorPicker>
                    <s:TextInput id="labelColorTextInput"
                                 text="{ColorUtil.int2strStandard(labelColorPicker.selectedColor)}"
                                 enter="labelColorTextInput_enterHandler(event)"/>
                </s:Group>
            </mx:GridItem>
        </mx:GridRow>
    </mx:Grid>
    <!--暂时无该功能
         <s:Group>
         <s:layout>
         <s:HorizontalLayout/>
         </s:layout>
         <s:Label text="图例文字"/>
         <s:ComboBox id="legendComboBox"
         dataProvider="{characterAC}"
         selectedIndex="0">
         </s:ComboBox>
         <mx:ColorPicker id="legendColorPicker">
         </mx:ColorPicker>
         <s:TextInput id="legendColorTextInput"
         text="{ColorUtil.int2str(legendColorPicker.selectedColor)}"
         enter="legendColorTextInput_enterHandler(event)"/>
         </s:Group>
    -->
</base:EditorChildBase>



