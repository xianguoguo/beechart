<?xml version="1.0" encoding="utf-8"?>
<!--
     图片+文本的项目渲染器.
     Flex4的List组件没有ItemClick事件，故这里要模仿出ItemClcik事件.
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                autoDrawBackground="false"
                minWidth="61"
                minHeight="64"
                xmlns:base="cn.alibaba.yid.chart.builder.components.base.*"
                click="itemrenderer1_clickHandler(event)"
                currentStateChange="itemrenderer1_currentStateChangeHandler(event)">
    <fx:Metadata>
		[Event(name="itemClick", type="mx.events.ItemClickEvent")]
	</fx:Metadata>
    <fx:Script>
        <![CDATA[
            import assets.FileAssests;
            
            import mx.events.FlexEvent;
            import mx.events.ItemClickEvent;
            import mx.events.StateChangeEvent;
            [Bindable]
			private var hover_Img:Class = FileAssests.hover_Img;
            [Bindable]
            private var actived_Img:Class = FileAssests.actived_Img;
			//经验数据，在该数据下，效果较好;可以根据需要进行重新设置.
            public var bestWidth:Number = 61.0;
            public var beseHeight:Number = 64.0;
			public var beseHeight2:Number = 83.0;
            
            /**
             * 重写measure()函数。适当放大显示组件的大小。
             * */
            override protected function measure():void
            {
                super.measure();
                
                var w:Number = bestWidth;
                var h:Number = beseHeight;
                if (data)
                {
                    //当图片和文字共存时，需要增加高度
                    if (data.label && data.image != null)
                    {
                        h = beseHeight2;
                    }
                    measuredWidth = w;
                    measuredHeight = h;
                }
            }
            
            protected function itemrenderer1_clickHandler(event:MouseEvent):void
            {
                var itemClick:ItemClickEvent = new ItemClickEvent(ItemClickEvent.ITEM_CLICK, true, false, null, itemIndex, null, data);
                dispatchEvent(itemClick);
            }
            
            protected function itemrenderer1_currentStateChangeHandler(event:StateChangeEvent):void
            {
                if (data)
                {
                    //当图片和文字共存时，重新设置高亮区域
                    if (data.label && data.image != null)
                    {
                        bgRect.left = 0;
                        bgRect.right = 0;
                        bgRect.top = 0;
                        bgRect.bottom = imageLabel.height - imageLabel.image.height;
                    }
                }
            }
        ]]>
    </fx:Script>
    <s:states>
        <s:State name="normal"/>
        <s:State name="hovered"/>
        <s:State name="selected"/>
    </s:states>
    <!--三种状态情况下的背景色，外观-->
    <s:Rect id="bgRect"
            left="0"
            right="0"
            top="0"
            bottom="0">
        <s:fill>
            <s:BitmapFill source.hovered="{hover_Img}"
                          source.selected="{actived_Img}"/>
        </s:fill>
    </s:Rect>
    <!--文字+图片的数据-->
    <base:ImageLabel id="imageLabel"
                     data="{data}"
                     verticalCenter="0"
                     horizontalCenter="0">
    </base:ImageLabel>
</s:ItemRenderer>
